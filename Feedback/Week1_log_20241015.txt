Starting code feedback for Yao, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.44 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week1, Feedback

Found the following files in parent directory: README.md

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 1 weekly directories: week1

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
When testing all my files, please move to code
/CMEECoursework/week1/code

ConcatenateTwoFiles.sh
Description
The ConcatenateTwoFiles.sh script is a simple shell script that combines the contents of two files into a single output file. This script can be useful in various scenarios where you need to merge the contents of text files or similar data sources.

csvtospace.sh
Description
csvtospace.sh is a simple shell script designed to convert CSV (Comma-Separated Values) files into space-separated files. This is particularly useful when you need to format CSV data for tools or scripts that require space-separated values instead of commas.

tabtocsv.sh
Description
tabtocsv.sh is a simple shell script designed to convert tab-separated files into CSV (Comma-Separated Values) format. This is useful when you need to work with tools or databases that require data in CSV format but your source file is tab-delimited.


UnixPrac1.txt
Description
This script contains a series of Unix commands for analyzing FASTA files, specifically focusing on the E. coli genome.

**********************************************************************

Results directory is empty - good! 

Found 4 code files: ConcatenateTwoFiles.sh, UnixPrac1.txt, csvtospace.sh, tabtocsv.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Check if three arguments are provided (two input files and one output file)
if [ $# -ne 3 ]; then
    echo "Error: Two input files and one output file are required."
    echo "Usage: $0 <file1> <file2> <output_file>"
    exit 1
fi

# Check if both input files exist
if [ ! -f "$1" ]; then
    echo "Error: First input file '$1' does not exist."
    exit 1
fi

if [ ! -f "$2" ]; then
    echo "Error: Second input file '$2' does not exist."
    exit 1
fi

# Check if the output file already exists
if [ -f "$3" ]; then
    read -p "Output file '$3' already exists. Do you want to overwrite it? (y/n): " answer
    if [[ $answer != [Yy]* ]]; then
        echo "Operation cancelled."
        exit 1
    fi
fi

# Concatenate the two files into the output file
cat "$1" > "$3"
cat "$2" >> "$3"

echo "Merged File is:"
cat "$3"

echo "Files have been successfully merged into '$3'."

**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Error: Two input files and one output file are required.
Usage: ConcatenateTwoFiles.sh <file1> <file2> <output_file>

**********************************************************************

Code ran without errors

Time consumed = 0.00394s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
# 1. Count the number of lines in each file
wc -l *.fasta

# 2. Print everything from the second line of the E. coli genome
tail -n +2 *coli*.fasta

# 3. Calculate the sequence length of the E. coli genome
tail -n +2 *coli*.fasta | tr -d '\n' | wc -c

# 4. Count the number of matches for "ATGC" in the E. coli genome
tail -n +2 *coli*.fasta | tr -d '\n' | grep -o "ATGC" | wc -l

# 5. Calculate AT/GC ratio
tail -n +2 *coli*.fasta | tr -d '\n' | 
awk '{print (gsub(/A|T/,""))/(gsub(/G|C/,""))}'

**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash

# Set data directory
data_dir="../data"

# Check input parameters
if [ $# -eq 0 ]; then
    echo "Usage: $0 <input_file.csv>"
    exit 1
fi

# Get input filename
input_file=$1

# Check if file exists
if [ ! -f "$input_file" ]; then
    echo "Error: File '$input_file' does not exist"
    exit 1
fi

# Check if file is CSV format
if [[ ${input_file##*.} != "csv" ]]; then
    echo "Error: '$input_file' is not a CSV file"
    exit 1
fi

# Create output filename
output_file="${input_file%.csv}_improved.csv"

# Convert CSV to space-separated file
awk -F'"' -v OFS='' '
{
    for (i=2; i<=NF; i+=2) {
        gsub(",", "ยง", $i)
    }
    gsub(",", "\t")
    gsub("ยง", ",")
    print
}' "$input_file" > "$output_file"

echo "Conversion complete: '$input_file' -> '$output_file'"

**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Usage: csvtospace.sh <input_file.csv>

**********************************************************************

Code ran without errors

Time consumed = 0.00461s

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: yy6024@ic.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2024

echo "Creating a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> $1.csv
echo "Done!"
exit

# Check if an input file is provided
if [ $# -eq 0 ]; then
    echo "Error: No input file provided."
    echo "Usage: $0 <input_file>"
    exit 1
fi

# Check if the input file exists
if [ ! -f "$1" ]; then
    echo "Error: Input file '$1' does not exist."
    exit 1
fi

# Convert tab-separated file to CSV
sed 's/\t/,/g' "$1"

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Creating a comma delimited version of  ...
Done!

**********************************************************************

Code ran without errors

Time consumed = 0.00790s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!