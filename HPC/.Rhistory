if (all(abs(rate_change[i:(i+4)]) < threshold)) {
burn_in_gen <- size_data$generation[i]
burn_in_estimates$appropriate_burn_in[burn_in_estimates$community_size == size] <- burn_in_gen
break
}
}
}
# If we couldn't find a stable period for some community sizes,
# use a conservative estimate based on the current burn-in settings
for (i in 1:nrow(burn_in_estimates)) {
if (is.na(burn_in_estimates$appropriate_burn_in[i])) {
burn_in_estimates$appropriate_burn_in[i] <- burn_in_estimates$community_size[i] * 0.1
}
}
# Return conclusion about appropriate burn-in periods
return(paste("Based on the analysis, the following burn-in periods are recommended:\n",
paste("- Community size", burn_in_estimates$community_size,
"requires approximately",
ceiling(burn_in_estimates$appropriate_burn_in),
"generations for burn-in", collapse = "\n")))
} else {
return("No data found to analyze. Please ensure simulation output files are in the working directory.")
}
# Initialize variables
simulation <- 1
sizes <- c(500, 1000, 2500, 5000)
means <- list()
# Process files for each community size
for (size in sizes) {
# Running total of richness for each community size
series_total <- c()
sim_count <- 0
# Process 25 simulations for each community size
for (i in 1:25) {
file_name <- paste("simulation_output_", simulation, ".rda", sep="")
# Try alternate naming pattern if file not found
if (!file.exists(file_name)) {
file_name <- paste("neutral_cluster_", simulation, ".rda", sep="")
}
# Load data if file exists
if (file.exists(file_name)) {
load(file_name)
if (exists("time_series") && length(time_series) > 0) {
series_total <- sum_vect(series_total, time_series)
sim_count <- sim_count + 1
}
}
simulation <- simulation + 1
}
# Calculate mean species richness
if (sim_count > 0) {
mean_rich_series <- series_total / sim_count
} else {
mean_rich_series <- c(0)
warning(paste("No valid data found for community size", size))
}
means[[length(means) + 1]] <- mean_rich_series
}
# Determine appropriate burn-in periods
burn_in_estimates <- numeric(length(sizes))
for (i in 1:length(sizes)) {
mean_series <- means[[i]]
if (length(mean_series) > 10) {
# Calculate rate of change (first derivative)
rate_change <- diff(mean_series) / diff(1:length(mean_series))
# Find where the rate of change becomes consistently small
# Define threshold as 1% of the maximum rate of change
threshold <- max(abs(rate_change[1:min(50, length(rate_change))])) * 0.01
# Find the first point where 10 consecutive values are below threshold
window_size <- 10
for (j in 1:(length(rate_change) - window_size + 1)) {
if (all(abs(rate_change[j:(j+window_size-1)]) < threshold)) {
burn_in_estimates[i] <- j
break
}
}
# If no stable period found, use a conservative estimate
if (burn_in_estimates[i] == 0) {
burn_in_estimates[i] <- ceiling(length(mean_series) * 0.1)
}
} else {
burn_in_estimates[i] <- 1
}
}
# Create the plot
png(filename="Challenge_D.png", width = 800, height = 600, res = 100)
par(mfrow = c(2,2), mar = c(4, 4, 3, 1), oma = c(0, 0, 2, 0))
for (i in 1:length(means)) {
mean_series <- means[[i]]
generations <- 1:length(mean_series)
# Plot mean species richness over time
plot(generations, mean_series, type = "l",
main = paste("Community Size =", sizes[i]),
xlab = "Generations", ylab = "Species Richness")
# Add a grid
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted")
# Add a vertical line indicating the estimated burn-in period
if (burn_in_estimates[i] > 0 && burn_in_estimates[i] < length(mean_series)) {
abline(v = burn_in_estimates[i], col = "red", lty = 2)
text(burn_in_estimates[i] * 1.1, min(mean_series) + (max(mean_series) - min(mean_series)) * 0.1,
paste("Burn-in:", burn_in_estimates[i]), col = "red")
}
# Add a horizontal line at the equilibrium value (mean of the last 50% of values)
equilibrium_range <- ceiling(length(mean_series) * 0.5):length(mean_series)
equilibrium_value <- mean(mean_series[equilibrium_range])
abline(h = equilibrium_value, col = "blue", lty = 3)
# Compare with the current burn-in setting (8 * size)
current_burn_in <- 8 * sizes[i]
if (current_burn_in < length(mean_series)) {
abline(v = current_burn_in, col = "green", lty = 4)
text(current_burn_in * 1.1, min(mean_series) + (max(mean_series) - min(mean_series)) * 0.2,
paste("Current:", current_burn_in), col = "green")
}
}
# Add an overall title
title("Mean Species Richness and Burn-in Period Analysis", outer = TRUE)
dev.off()
# Return a summary of findings
cat("Estimated appropriate burn-in periods:\n")
for (i in 1:length(sizes)) {
cat(sprintf("Community size %d: %d generations (current setting: %d)\n",
sizes[i], burn_in_estimates[i], 8 * sizes[i]))
}
# Return a conclusion
conclusion <- paste("Based on the analysis of species richness stabilization,",
"the appropriate burn-in periods for different community sizes are:",
paste(paste("Size", sizes, ":", burn_in_estimates, "generations"), collapse="; "),
"This suggests that", ifelse(mean(burn_in_estimates/(8*sizes)) < 1,
"shorter", "longer"),
"burn-in periods than the current setting (8 × size) may be appropriate.")
return(conclusion)
# Function to implement the coalescence algorithm
coalescence_simulation <- function(J, speciation_rate) {
# a) Initialize a vector lineages of length J with 1 in every entry
lineages <- rep(1, J)
# b) Initialize an empty vector abundances
abundances <- c()
# c) Initialize a number N = J
N <- J
# d) Calculate theta, where theta = v * (J-1)/(1-v)
theta <- speciation_rate * (J - 1) / (1 - speciation_rate)
# Main coalescence loop
while (N > 1) {
# e) Choose an index j for the vector lineages at random
j <- sample(1:N, 1)
# f) Pick a random number between a and 1
randnum <- runif(1)
# g) & h) Decide whether to speciate or coalesce
if (randnum < (theta / (theta + N - 1))) {
# Speciation - append lineages[j] to abundances
abundances <- c(abundances, lineages[j])
} else {
# Coalescence - choose another random index i ≠ j
i <- sample((1:N)[-j], 1)
# Merge lineages
lineages[i] <- lineages[i] + lineages[j]
}
# i) Remove lineages[j]
lineages <- lineages[-j]
# j) Decrease N by one
N <- N - 1
}
# l) Once N = 1, add the remaining element to abundances
abundances <- c(abundances, lineages[1])
# m) Return the vector of abundances
return(abundances)
}
# Function to convert abundance vector to octave classes (reusing your octaves function)
octaves <- function(abundance_vector) {
# Determine the octave class for each abundance value
octave_classes <- floor(log2(abundance_vector))
# Count the number of species in each octave class
octave_counts <- tabulate(octave_classes + 1)
return(octave_counts)
}
# Start timing for coalescence simulations
start_time <- proc.time()
# Parameters
community_sizes <- c(500, 1000, 2500, 5000)
speciation_rate <- 0.1  # Use the same speciation rate as in your cluster simulations
num_repeats <- 25       # Same number of repeats as the cluster for comparison
# Store coalescence results
coalescence_results <- list()
# Run coalescence simulations for each community size
for (i in 1:length(community_sizes)) {
size <- community_sizes[i]
oct_results <- list()
# Run multiple repeats for reliable comparison
for (rep in 1:num_repeats) {
# Run simulation and convert to octave classes
abundances <- coalescence_simulation(size, speciation_rate)
oct_results[[rep]] <- octaves(abundances)
}
# Combine all octave results for this community size
combined_octaves <- oct_results[[1]]
if (num_repeats > 1) {
for (rep in 2:num_repeats) {
combined_octaves <- sum_vect(combined_octaves, oct_results[[rep]])
}
}
# Calculate mean octave distribution
mean_octaves <- combined_octaves / num_repeats
coalescence_results[[i]] <- mean_octaves
}
# Record time for coalescence simulations
coal_time <- (proc.time() - start_time)[3]  # Time in seconds
# Load cluster simulation results
cluster_results <- list()
# Try to load from Combined_results.rda if it exists
if (file.exists("Combined_results.rda")) {
load("Combined_results.rda")
cluster_results <- combined_results  # Assuming this is how you stored your results
} else {
# If not, try to process files directly (similar to process_neutral_cluster_results)
cluster_500 <- 0
cluster_1000 <- 0
cluster_2500 <- 0
cluster_5000 <- 0
total_500 <- c()
total_1000 <- c()
total_2500 <- c()
total_5000 <- c()
for (i in 1:100) {
# Try different possible file naming patterns
file_name <- paste0("simulation_output_", i, ".rda")
if (!file.exists(file_name)) {
file_name <- paste0("neutral_cluster_", i, ".rda")
}
if (file.exists(file_name)) {
load(file_name)
if (i <= 25) {
size = 500
} else if (i <= 50) {
size = 1000
} else if (i <= 75) {
size = 2500
} else if (i <= 100) {
size = 5000
}
burn_in = 80
# Process the abundance list from your simulation
if (exists("abundance_list") && length(abundance_list) > burn_in) {
total <- c()
for (j in burn_in:length(abundance_list)) {
total <- sum_vect(total, abundance_list[[j]])
}
# Update the totals and counts based on community size
if (size == 500) {
cluster_500 <- cluster_500 + (length(abundance_list) - burn_in + 1)
total_500 <- sum_vect(total_500, total)
} else if (size == 1000) {
cluster_1000 <- cluster_1000 + (length(abundance_list) - burn_in + 1)
total_1000 <- sum_vect(total_1000, total)
} else if (size == 2500) {
cluster_2500 <- cluster_2500 + (length(abundance_list) - burn_in + 1)
total_2500 <- sum_vect(total_2500, total)
} else if (size == 5000) {
cluster_5000 <- cluster_5000 + (length(abundance_list) - burn_in + 1)
total_5000 <- sum_vect(total_5000, total)
}
}
}
}
# Calculate means if we have data
if (cluster_500 > 0) mean_500 <- total_500 / cluster_500 else mean_500 <- c(0)
if (cluster_1000 > 0) mean_1000 <- total_1000 / cluster_1000 else mean_1000 <- c(0)
if (cluster_2500 > 0) mean_2500 <- total_2500 / cluster_2500 else mean_2500 <- c(0)
if (cluster_5000 > 0) mean_5000 <- total_5000 / cluster_5000 else mean_5000 <- c(0)
cluster_results <- list(mean_500, mean_1000, mean_2500, mean_5000)
}
# Estimate cluster computation time
# Assuming each cluster job took about 11.5 hours (as in the assignment)
cluster_job_time <- 11.5 * 3600  # Convert hours to seconds
cluster_total_time <- cluster_job_time * 100  # 100 cluster jobs
# Plot comparison between coalescence and cluster results
png(filename="Challenge_E.png", width = 800, height = 600)
par(mfrow = c(2, 2))
size_names <- c("500", "1000", "2500", "5000")
for (i in 1:length(community_sizes)) {
# Adjust vectors to have the same length for comparison
coal_oct <- coalescence_results[[i]]
clust_oct <- cluster_results[[i]]
max_len <- max(length(coal_oct), length(clust_oct))
if (length(coal_oct) < max_len) coal_oct <- c(coal_oct, rep(0, max_len - length(coal_oct)))
if (length(clust_oct) < max_len) clust_oct <- c(clust_oct, rep(0, max_len - length(clust_oct)))
# Setup barplot data and colors
oct_data <- rbind(coal_oct, clust_oct)
colnames(oct_data) <- 0:(ncol(oct_data)-1)  # Octave class numbers
rownames(oct_data) <- c("Coalescence", "Cluster")
# Create barplot
barplot(oct_data, beside=TRUE,
main=paste("Community Size =", size_names[i]),
xlab="Octave Class", ylab="Species Count",
col=c("darkblue", "darkred"),
legend.text=TRUE, args.legend=list(x="topright"))
}
title("Comparison of Species Abundance Distributions: Coalescence vs. Cluster",
outer=TRUE, line=-1, cex.main=1.2)
dev.off()
# Calculate time comparison
coal_hours <- coal_time / 3600  # Convert seconds to hours
cluster_hours <- cluster_total_time / 3600  # Already in hours
speedup_factor <- cluster_hours / coal_hours
# Return a detailed explanation
return(paste(
"Time Comparison of Coalescence vs. Cluster Simulations:",
sprintf("- Coalescence simulation: %.2f CPU hours", coal_hours),
sprintf("- Cluster simulation: %.2f CPU hours (estimated from 100 jobs × 11.5 hours)", cluster_hours),
sprintf("- The coalescence approach is approximately %.0f times faster.", speedup_factor),
"",
"Why Coalescence Simulations Are Much Faster:",
"1. Algorithmic Efficiency: Coalescence simulations work backwards in time, directly generating the final community structure without simulating the entire evolutionary process. This eliminates the need to track every birth and death event.",
"2. Mathematical Equivalence: The coalescence approach produces statistically equivalent results to the forward-time simulations, but requires far fewer computational steps.",
"3. Memory Efficiency: Coalescence requires less memory as it only tracks lineages that actually contribute to the final community.",
"4. No Burn-in Period: The coalescence algorithm directly generates the equilibrium distribution, eliminating the need for a burn-in period which saves substantial computation time.",
"5. Direct Generation of Abundances: Rather than tracking individual species identities throughout the simulation, coalescence directly generates the abundance distribution.",
"",
"The dramatic speed difference demonstrates why coalescence methods are preferred when only the equilibrium distribution is needed, rather than the full time series of community dynamics.",
sep="\n"
))
# Challenge question E
Challenge_E <- function() {
# Function to implement the coalescence algorithm
coalescence_simulation <- function(J, speciation_rate) {
# a) Initialize a vector lineages of length J with 1 in every entry
lineages <- rep(1, J)
# b) Initialize an empty vector abundances
abundances <- c()
# c) Initialize a number N = J
N <- J
# d) Calculate theta, where theta = v * (J-1)/(1-v)
theta <- speciation_rate * (J - 1) / (1 - speciation_rate)
# Main coalescence loop
while (N > 1) {
# e) Choose an index j for the vector lineages at random
j <- sample(1:N, 1)
# f) Pick a random number between a and 1
randnum <- runif(1)
# g) & h) Decide whether to speciate or coalesce
if (randnum < (theta / (theta + N - 1))) {
# Speciation - append lineages[j] to abundances
abundances <- c(abundances, lineages[j])
} else {
# Coalescence - choose another random index i ≠ j
i <- sample((1:N)[-j], 1)
# Merge lineages
lineages[i] <- lineages[i] + lineages[j]
}
# i) Remove lineages[j]
lineages <- lineages[-j]
# j) Decrease N by one
N <- N - 1
}
# l) Once N = 1, add the remaining element to abundances
abundances <- c(abundances, lineages[1])
# m) Return the vector of abundances
return(abundances)
}
# Function to convert abundance vector to octave classes (reusing your octaves function)
octaves <- function(abundance_vector) {
# Determine the octave class for each abundance value
octave_classes <- floor(log2(abundance_vector))
# Count the number of species in each octave class
octave_counts <- tabulate(octave_classes + 1)
return(octave_counts)
}
# Start timing for coalescence simulations
start_time <- proc.time()
# Parameters
community_sizes <- c(500, 1000, 2500, 5000)
speciation_rate <- 0.1  # Use the same speciation rate as in your cluster simulations
num_repeats <- 25       # Same number of repeats as the cluster for comparison
# Store coalescence results
coalescence_results <- list()
# Run coalescence simulations for each community size
for (i in 1:length(community_sizes)) {
size <- community_sizes[i]
oct_results <- list()
# Run multiple repeats for reliable comparison
for (rep in 1:num_repeats) {
# Run simulation and convert to octave classes
abundances <- coalescence_simulation(size, speciation_rate)
oct_results[[rep]] <- octaves(abundances)
}
# Combine all octave results for this community size
combined_octaves <- oct_results[[1]]
if (num_repeats > 1) {
for (rep in 2:num_repeats) {
combined_octaves <- sum_vect(combined_octaves, oct_results[[rep]])
}
}
# Calculate mean octave distribution
mean_octaves <- combined_octaves / num_repeats
coalescence_results[[i]] <- mean_octaves
}
# Record time for coalescence simulations
coal_time <- (proc.time() - start_time)[3]  # Time in seconds
# Load cluster simulation results
cluster_results <- list()
# Try to load from Combined_results.rda if it exists
if (file.exists("Combined_results.rda")) {
load("Combined_results.rda")
cluster_results <- combined_results  # Assuming this is how you stored your results
} else {
# If not, try to process files directly (similar to process_neutral_cluster_results)
cluster_500 <- 0
cluster_1000 <- 0
cluster_2500 <- 0
cluster_5000 <- 0
total_500 <- c()
total_1000 <- c()
total_2500 <- c()
total_5000 <- c()
for (i in 1:100) {
# Try different possible file naming patterns
file_name <- paste0("simulation_output_", i, ".rda")
if (!file.exists(file_name)) {
file_name <- paste0("neutral_cluster_", i, ".rda")
}
if (file.exists(file_name)) {
load(file_name)
if (i <= 25) {
size = 500
} else if (i <= 50) {
size = 1000
} else if (i <= 75) {
size = 2500
} else if (i <= 100) {
size = 5000
}
burn_in = 80
# Process the abundance list from your simulation
if (exists("abundance_list") && length(abundance_list) > burn_in) {
total <- c()
for (j in burn_in:length(abundance_list)) {
total <- sum_vect(total, abundance_list[[j]])
}
# Update the totals and counts based on community size
if (size == 500) {
cluster_500 <- cluster_500 + (length(abundance_list) - burn_in + 1)
total_500 <- sum_vect(total_500, total)
} else if (size == 1000) {
cluster_1000 <- cluster_1000 + (length(abundance_list) - burn_in + 1)
total_1000 <- sum_vect(total_1000, total)
} else if (size == 2500) {
cluster_2500 <- cluster_2500 + (length(abundance_list) - burn_in + 1)
total_2500 <- sum_vect(total_2500, total)
} else if (size == 5000) {
cluster_5000 <- cluster_5000 + (length(abundance_list) - burn_in + 1)
total_5000 <- sum_vect(total_5000, total)
}
}
}
}
# Calculate means if we have data
if (cluster_500 > 0) mean_500 <- total_500 / cluster_500 else mean_500 <- c(0)
if (cluster_1000 > 0) mean_1000 <- total_1000 / cluster_1000 else mean_1000 <- c(0)
if (cluster_2500 > 0) mean_2500 <- total_2500 / cluster_2500 else mean_2500 <- c(0)
if (cluster_5000 > 0) mean_5000 <- total_5000 / cluster_5000 else mean_5000 <- c(0)
cluster_results <- list(mean_500, mean_1000, mean_2500, mean_5000)
}
# Estimate cluster computation time
# Assuming each cluster job took about 11.5 hours (as in the assignment)
cluster_job_time <- 11.5 * 3600  # Convert hours to seconds
cluster_total_time <- cluster_job_time * 100  # 100 cluster jobs
# Plot comparison between coalescence and cluster results
png(filename="Challenge_E.png", width = 800, height = 600)
par(mfrow = c(2, 2))
size_names <- c("500", "1000", "2500", "5000")
for (i in 1:length(community_sizes)) {
# Adjust vectors to have the same length for comparison
coal_oct <- coalescence_results[[i]]
clust_oct <- cluster_results[[i]]
max_len <- max(length(coal_oct), length(clust_oct))
if (length(coal_oct) < max_len) coal_oct <- c(coal_oct, rep(0, max_len - length(coal_oct)))
if (length(clust_oct) < max_len) clust_oct <- c(clust_oct, rep(0, max_len - length(clust_oct)))
# Setup barplot data and colors
oct_data <- rbind(coal_oct, clust_oct)
colnames(oct_data) <- 0:(ncol(oct_data)-1)  # Octave class numbers
rownames(oct_data) <- c("Coalescence", "Cluster")
# Create barplot
barplot(oct_data, beside=TRUE,
main=paste("Community Size =", size_names[i]),
xlab="Octave Class", ylab="Species Count",
col=c("darkblue", "darkred"),
legend.text=TRUE, args.legend=list(x="topright"))
}
title("Comparison of Species Abundance Distributions: Coalescence vs. Cluster",
outer=TRUE, line=-1, cex.main=1.2)
dev.off()
# Calculate time comparison
coal_hours <- coal_time / 3600  # Convert seconds to hours
cluster_hours <- cluster_total_time / 3600  # Already in hours
speedup_factor <- cluster_hours / coal_hours
# Return a detailed explanation
return(paste(
"Time Comparison of Coalescence vs. Cluster Simulations:",
sprintf("- Coalescence simulation: %.2f CPU hours", coal_hours),
sprintf("- Cluster simulation: %.2f CPU hours (estimated from 100 jobs × 11.5 hours)", cluster_hours),
sprintf("- The coalescence approach is approximately %.0f times faster.", speedup_factor),
"",
"Why Coalescence Simulations Are Much Faster:",
"1. Algorithmic Efficiency: Coalescence simulations work backwards in time, directly generating the final community structure without simulating the entire evolutionary process. This eliminates the need to track every birth and death event.",
"2. Mathematical Equivalence: The coalescence approach produces statistically equivalent results to the forward-time simulations, but requires far fewer computational steps.",
"3. Memory Efficiency: Coalescence requires less memory as it only tracks lineages that actually contribute to the final community.",
"4. No Burn-in Period: The coalescence algorithm directly generates the equilibrium distribution, eliminating the need for a burn-in period which saves substantial computation time.",
"5. Direct Generation of Abundances: Rather than tracking individual species identities throughout the simulation, coalescence directly generates the abundance distribution.",
"",
"The dramatic speed difference demonstrates why coalescence methods are preferred when only the equilibrium distribution is needed, rather than the full time series of community dynamics.",
sep="\n"
))
}
